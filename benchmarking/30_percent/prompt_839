You are a competitive programmer solving a Project Euler problem, which is provided in HTML format at the end of the prompt. Write a Python script that computes the requested value correctly and efficiently.

Requirements:

- Print the final answer clearly
- Avoid brute force - assume naive approaches will timeout/exhaust memory
- Use mathematical insights, optimizations, and efficient algorithms
- Include a brief explanation: plain-English summary, then key math/coding techniques

Constraints:

- 5-minute timeout on 12th Gen Intel i7-1270P (2.20 GHz), 16GB RAM, Python 3.13
- Standard library only
- If code doesn't run to completion within timeout, I'll abort and let you know

Your code will be judged solely on correctness. You get two attempts - if wrong, you'll only see "incorrect" and any console output.

The problem:

<p>
The sequence $S_n$ is defined by $S_0 = 290797$ and $S_n = S_{n - 1}^2 \bmod 50515093$ for $n &gt; 0$.</p>

<p>There are $N$ bowls indexed $0,1,\dots ,N-1$. Initially there are $S_n$ beans in bowl $n$.</p>

<p>
At each step, the smallest index $n$ is found such that bowl $n$ has strictly more beans than bowl $n+1$. Then one bean is moved from bowl $n$ to bowl $n+1$.</p>

<p>
Let $B(N)$ be the number of steps needed to sort the bowls into non-descending order.<br>
For example, $B(5) = 0$, $B(6) = 14263289$ and $B(100)=3284417556$.</p>

<p>
Find $B(10^7)$.</p>