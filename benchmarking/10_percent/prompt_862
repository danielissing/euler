You are a competitive programmer solving a Project Euler problem, which is provided in HTML format at the end of the prompt. Write a Python script that computes the requested value correctly and efficiently.

Requirements:

- Print the final answer clearly
- Avoid brute force - assume naive approaches will timeout/exhaust memory
- Use mathematical insights, optimizations, and efficient algorithms
- Include a brief explanation: plain-English summary, then key math/coding techniques

Constraints:

- 5-minute timeout on 12th Gen Intel i7-1270P (2.20 GHz), 16GB RAM, Python 3.13
- Standard library only
- If code doesn't run to completion within timeout, I'll abort and let you know

Your code will be judged solely on correctness. You get two attempts - if wrong, you'll only see "incorrect" and any console output.

The problem:

<p>
For a positive integer $n$ define $T(n)$ to be the number of strictly larger integers which can be formed by permuting the digits of $n$.</p>

<p>
Leading zeros are not allowed and so for $n = 2302$ the total list of permutations would be:</p>
<div style="text-align:center;">
$2023,2032,2203,2230,\mathbf{2302},2320,3022,32 02,3220$</div>
<p>
giving $T(2302)=4$.</p>

<p>
Further define $S(k)$ to be the sum of $T(n)$ for all $k$-digit numbers $n$. You are given $S(3) = 1701$.</p>

<p>
Find $S(12)$.</p>